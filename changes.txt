
Good practices:
	Changed to Int16 instead of Int where I think we don't need all this value. This might generate a problem if the value is too big, but would be known better by playtesting.
	Also the same with small values but changed to sbyte.
	Maximum Grid size: Y: 127 X: 127
	Maximum Messages in sequence: 127

Things to consider:
	Interfaces and abstraction patterns were chosen over single struct patterns to help with mutation and polymorphy, but it can be costlier for the game to run. So this can pattern can be revised if needed.

Devlog:

- Moved the command "grids.Add(newBox);" to be inside of the FOR. The project would not even be the way was before.
- Moved console write information used for debugging to be inside #if DEBUG tag, this way the final player will not get those messages.
- Created a new class to handle a random number:
	1. based on SOLID, this class is the single point on the system to take care to generate random values and seeds;
	2. since this class can be accessed from anywhere from the same seed generated before, I utilized also a Singleton pattern;
	3. if needed in the future, could have a method to pass a seed;
	4. summary added to help in documentation of the class;
	5. for a cleaner code, I started using the body method for methods that had only 1 line;
	6. added an alias in the use of Program class for the new created Random;
	7. new Next method to encapsulate SystemRandom;
	8. -3 Overflows so we could get all System Random Calls.
			
- The method GetRandomInit inside Program was not being called anywhere, also we moved that logic to be inside our constructor to the new Random class. So this method was erased.
- Created a new constructor for the Grid class with no parameters, this way if we don't want to select the size of the grid, the game will create for us with random values.
- Created a new Data folder to hold data (.json) structure and classes. 
	IMP: This could be renamed based on the size and proportion the project could take.

- Within the new folder, I created a new settings.json file to hold some settings of the game, such as minimum and maximum grid size.
- I could have used the default app.settings file, but since the project was created using .net core I preferred to stick with JSON for portability.
- Changed the new setting file for copy always, so we don't have any problem if we decide to publish this in the future.
	IMP: Depending on the size and proportion our game take, we could configure this folder to always create a minified version for every JSON file automatically on each publish.

- Created a new structure inside the new Setting JSON file to hold information on the min and max size for the grid.
- Installed via Nuget the packages "Microsoft.Extensions.Configuration" and "Microsoft.Extensions.Configuration.Json" so we could load our configuration Json file on the Startup method that will be called inside the setup using the methods provided by Microsoft.
	


✦ Template Pattern
	
- For Data structure I will use a Template Pattern, which means that every class will have one interface.
- Even for the most basic data class this is helpful if we need to create different classes for loading and saving data, following SOLID, each class needs to hold a single responsibility.
- Also if our project grows and we start to use unit or integration tests, having this already well structured and defined will help.
- Creation of an interface for the settings, and a class using the interface that will get the information from the JSON file.
- The class has also a method to retrieve information from the IConfiguration that will load from JSON and pass it to the properties. This method violates SOLID principles since the name of the properties is used in the method, but since this should not be changed often, for now, should be ok.
- Create a new CONST variable at the root of the program class to hold the path to the settings folder. This path could be passed as an argument when starting the project, but since I'm not sure how the setting of the game will be played, will be easier to test if we would the variable for now.
- [TextLoader] After the creation of the TextLoader logic, I changed the settings interface to inherit from a base one, check the document below:
	

	
✦ Project organization

- It's easier to navigate and find code when we have less hierarchy of folders, so I choose to keep it simple with a single folder format. When the project grows, this can be reviewed to the best structure, maybe even break the project into smaller ones each responsible for a service.
- The program class should be only responsible for initializing our game, and if needed, doing some configuration for the .net application to correctly run. I moved out the entire code that we have before into a new structure, so:
	1. with the new Microsoft.Extensions.Configuration, we load the settings file into a new static structure that can be accessed and modified across all the game;
	2. if we want the future player to be able to change those values, we needed a class to save the information from the static structure to the JSON file.
		
- Changed the method SETUP to be responsible to load the settings information and handle any load that is necessary for the game to start.
- The MAIN method had all the methods defined inside it, now only calls the SETUP method, and after the SETUP calls the method StartGame in the new class that will be created to handle this.
- Added a try-catch block for exception handling. This can be further developed in the future to save log files in case of an error for easier debugging.
- Creation of a static GameManager class that will be responsible for managing all the game.
- Given the simplicity of the game, a state machine will not be needed but could be used here to store in what state the game currently is.
- From here we call each class and method responsible for each step in the gameplay.
- It's a new game we will call a class that is responsible for the main menu. Even if the menu now is really simple, we can further expand this in the future in case we want to add new game options, load or save, or even change our settings file from within the game.
- Created a new folder and namespace for classes that will be responsible for the game behaviors.

		
✦ GameManager

- Following the SOLID principles, each class needs to have a single responsibility in the game process, so for each step needed for the game a class will be created, such as Menu, New Game, Setup, Battlefield Drawing, Combat, Game Over, etc.
- Game manager will be responsible to call each one of those classes as needed. Since the classes will be called from GM, and not them calling GM, it doesn't make sense to use the Singleton pattern in GM, just leaving it static is enough.

✦ GameBehavior

- Every class that will be called from the GameManager will inherit the same IBehavior interface, even though their methods can differ a lot, they all are used as game behavior, this can be used to help for unit and integration tests, also if we want to create a logging functionality for debugging, would help to implement that.
- It will also help us to keep the GM class open for new behavior classes without needing to change it, following the SOLID principle
- It defines START and END methods that will be called in every behavior class, this way we know when they have started or finished what it has to do, and also if we ever need to use Event patterns to call for multi-thread between behavior, this can help.
	-> Note: Also if in the future we see the need to further increase this system to be a state machine, we can reuse this structure
- Will have a private property for each behavior it needs to call, with the type of the IBehavior to not be strongly typed, so we actually don't care about the class that is being called, this way we can use an automated test class, also if your logic calls for different implementation classes for the Behavior, we don't care since we just are orchestrating the calls here.
	-> Note: I used a private prop instead of a private field to keep defined convention, and also to help with abstraction, tests, and debugging.

✦ NewGame

- New class was created inherited from IBehavior to handle the new game, such as getting input from the user, setting up things, and preparing for battle.
- To start a new game, we will set the battlefield size, get the player name and let it choose a class.
- [CurrentGame] This class will load and initiate what is needed for the game to start, and then give it back to game manager, so I created a private field for each information that is needed, this way we don't have two times the object allocated in the memory
- [CurrentGame] Also was created to return each individual private field as asked, this way we could handle each sepparated step of the new game class.
- [CurrentGame] We could even go further and break this class into smaller one, each responsible for a function in a new game (get player name, get character, get grid information), but at this point would only added a non necessary complexity.

✦ Gamification

- When we are focused in create the core mechanics of the game we tend to be straight to the point, and often forget to input some gamification and fun features that the player will enjoy, so with that in mind the messages for the will the player will be rewritten to add a little more flavor and to be friendlier.
- Also at the start of a new game, the game will briefly explain the rules to the player.
- In the end 3 new behaviors was created to handle each task, Select Battlefield, GetPlayerName and Select Character, this way we break the responsibility to each class, also if we want to implement a try again, and only partially change those selections is easier.

✦ Texts

- Most often the person who writes the text that the player will read is not the developer, so we should be able to easily change that without the need to go through a bunch of code and classes.
- Not only that, if we want to implement localization, often we need to find between a database or different language files which one is correct. This game will not have localization for now, but it makes total sense to create a class to get the correct text for each interaction.
- With all that in mind, a JSON file will be created to have the texts that the player will see, a new class Text will be created so we can get the text from the JSON file and be able to use it in the game, and a class for message handling will be created so we cand send messages to the player, and also get their response if is needed.

- In the JSON we have two structures, one where we just want to show some text, so we have an array to store those texts that will be shown to the player, but we also have a message input text, that is when we expect the player to give us an answer, so we can also define an answer in case the player input something that we are not expecting.
- In the JSON we have several structures. Each screen will be an object, that needs a matching class name in the game, and inside it several subsequent objects that have multiple messages. Those objects can be different between player input, multiple options, simple messages, etc.
- A new class and interface will be created in the model for each behavior that needs text, likewise said in the document before.
- A base ITextMessage interface was created, any time we need a new kind of text message (multiple options, input, or any other thing), we are inert from this base interface. And then, each behavior text class takes care of what kind of text message it's needed
- If we need a new type of message in the future, this structure can be easily added without interfering with what is already working (SOLID principles at its best!)
- The interface and class that will handle the messages for each behavior have a matching name with the tag in the JSON file, and also one (or several) lists with a class that implements a version from ITextMessage, this way, each class knows what kind of message is needed, and the behavior class knows which one to calls during the gameplay.

✦ TextLoader

- New class created in the core folder and namespace responsible to load the texts from the JSON file into the respective data class
- This class has a dynamic data message class, and will be instantiated in each behavior, so each behavior handles its own data class name, also handles when to hold memory along with this instance or release it. 
	-> NOTE: this way, the responsibility of this class is ONLY to load the JSON file into its internal object, and return the messages when asked.
	- We don't care who is calling, when or what type, as long as we find the correct data class name and structure in the JSON file. SOLID attacks again!
	- We could further develop this class to get multiple paths for multiple files responsible for data holding of the game, but right now we don't have this need, the game is still very simple and doesn't load/save anything.
- Added the path and name of the JSON file containing the text into the settings file and structure, this way if in the future we want this file to be an indifferent place, or even we change that in runtime, we have a place to know where is it.
- Similar to the Grid Settings, a new class, interface, and call to load the settings in the program class was added. (IMessageTextFileSettings and MessageTextFileSettings)
- I Realize now we can have multiple types of settings, so makes sense to have the main interface for the settings with the common things (singleton instance and configure method), so I created this new interface to be used in the new text loader settings, and also changed the GridSettings.

✦ PlayerMessageHandler

- Now we have the structure built with the texts to show to the player, but we still need someone to handle showing this in a correct manner, and getting the inputs when needed from the player, that's why we will create this class.
- It will be called from the behavior when we need to show or get something to the player, this way the behavior is responsible to let this class know what needs to be exhibited on the screen through the TextLoader object has loaded.
- We could create a class to handle writing and another to get the player input, but since our game is still very simple, we don't need this kind of complexity. To keep things simple as is needed is also something good.
- Since we can show messages to the player almost every time, makes sense to turn this class into a Singleton. 
- Added method to show messages from a list and get input (for the name).
- Added a method to show messages during gameplay (such as player take X damage).
- Added different methods do paint the Grid so we can see the player and enemy in red and green.

 ✦ CurrentGame
 
- Until now, all the information needed for one game session such as Grid, PlayerCharacter, EnemyCharacter, Status, current play, position, and so on was scarce around all the code, and each class was doing something with it in a very confusing manner.
 - This class will hold in a single access point all the information needed for one game session to be able to run. The information will be handled, provided, and updated by each behavior class that is responsible for something in the gameplay, but everyone will access it here in the same place.
 - Along with the GameManager that works as a hub to call each Behavior needed for the gameplay, here will be stored all the information needed for the gameplay, so make sense that the Game Manager hold the instance of this class and be responsible for it.
 - NewGame Class is responsible to fill what is needed for us to start the game, so the information that we are getting there from the player (Name, chosen character, grid information) will be stored here, also all that is needed to be automatically generated will be handled by that class and stored here.
 - Since this class is not supposed to have any logic in it since will be handled by the game behaviors, it makes sense that this class is under the Model folder and namespace, and like before, it will also have an interface to define the properties.
 - Player and enemy character could be a list to work as a team, but since the should is only 1x1 at this point, a single reference was made.
 - The Player name is stored in Character class and also here, which is not so good since we have the same information twice, but for me makes sense to keep this outside character, if we want to do a new one after a battle, we don't need to ask the player the name again, but we can ask for a new character. 
 
✦ Grid
 
 - In the settings file, created a structure to predefine some grid sizes that the player will select, if none are selected, will generate a random based on the minimum and maximum size. If the list is increased, it will automatically adjust the options that the player has.
 - Created new data structure files to accommodate those changes.
 - Created a new method in GridSettings singleton to return a new random option, this will be used if no predefined grid option existed in the settings file, also to create a new value in the list for the player to select
 - Refactoring the class: originally the class was very messy, so I did a little refactoring to make this class with the same format as the one we changed.
	.Moved from the root of the project to the more suitable Core folder and namespace. 
	.Created an interface for it, for the reasons said above, and maintain convention.
	.A new constructor was added to get information from the PredefinedGridOptions class, which will contain the information for the grid that the player selected. Another constructor was added with the properties, to help with unit tests creation and in case we ever need to create those without the class
	.Moved out GridBox from Type to its own class in the Model folder, with an interface. Just to be a little cleaner, moved the bool occupied to the final of parameters in the constructor and added it as an option, since most of the time this value will be false.
	.With this we don't need the index properties anymore, since the index will be the position in the array.
	.Changed Grid and GridBox fields into properties.
	.Array is lighter than a list since we know the number of positions we will need when creating the grid and that will not change until a new game, makes sense to work with an array to gain a little memory consumption
	.Moved the method to populate the GridBox to a private function, to avoid code repetition, simplified the method, and removed complex calculations to get the index, just an index int would suffice.
	.Moved the method drawBattlefield to our PlayerMessageHandler that is responsible to write things to the player. The Grid class should only hold the information.
	.Also refactored the method, since was creating a new GridBox to check if was occupied... That makes no sense since always would be false. New the method gets a GridBox list already filled as a parameter and does a single for it, and the length of column and line as a parameter so we do a single if to know when to next line.
	.Would be nice to differentiate the player from the enemy, will think that during playtesting
 - There was a Grid.cs file in the folder of the solution doing nothing, so I deleted it.
 
 ✦ Character
 
 - The file that needs a lot of changes and refactoring. Let's go through a breakdown of it
-Refactoring the class:
	.We can have different character classes, each having a specific mechanic to them, but still, we have a lot of mechanics that are common, such as walk, die, attack (even though the attack CAN be different, but still all of the attacks)
	.Makes total sense to use polymorphy and class abstraction here, having a common base abstract character class, and then each specific character class inert from it, do its own implementation and rules.
	.If needed, we could even create an intermediate class for classes that share some common methods, like ranged characters, melee characters, but right now the game doesn't have this distinction so all characters will inert from the same base class, but would be very easy and painless to change in case the project became bigger.
	.Like the pattern so far, we will use an interface for the character class, specially useful if we have problems with debugging in the future or want to implement new characters or automated tests.
	.Each character has initial attributes such as health, damage, skills, and so on. So far I've been using JSON files to store data information, but here this method is not so interesting because we don't want this information easily accessible to the player, even if we minify and encrypt the JSON it's still easier to access compared to a structure compiled holding this information, so that's what we are gonna do.
	.Each character class will have its class the base values that the character will use.
		Note: the user still could access and change this information during runtime if used a program to change memory value (such as Cheat Engine), but this is way beyond the scope, so I think we can live with that.
		IMP: since we want to keep this structure mutable and inheritable, and use an interface to hold the base fields, instead of a real structure will be used a class so we avoid boxing value which can impact performance.
	.Character.cs from the root folder of the project was deleted.
	.Also I think since this is one of the core features of the game, and we can add different characters, makes sense to create a new folder and namespace for them, so Characters namespace was created.
	.Until now the classes were controlled via an enum in the Types file, since the changes above are made this enum is no longer necessary. It is indeed faster to look for the enum compared to the class structures, but it violates SOLID principle of reusability since we need to go there and change the value if a new character is added. If we face performance problems, this structure can be thought of, but since the game is still pretty simple, for me makes sense to not use this, so was deleted.
	.Changed all fields to properties as been until now.
	.In the character there was a currentBox and playerIndex. Since our Grid class has an array of GridBox, as long we hold the Index Array where this character is we don't need to hold any information from the GridBox, so it was removed. Also is lighter and cheaper to hold int value of the index compared to a whole structure.
		Note: If we really wanted to squish memory consumption we could store this information in a sbyte instead of Int18, but then our Grid would be limited to 127 positions, right now we don't have this limitation, but could be thought in the future.
	.The Health, Damage, and Damage Multiplier was a float type. We can work with decimal values for those but is more costly than working with integer values. For the scope of this project for me makes sense to gain a little of memory consumption by turning those into int
	.Changed Health, BaseDamage, DamageMultiplier, and PlayerIndex to SmallIndex (Int16) since this type should be enough for what we are doing here, also changed the name of those properties to "Current", since the base values will be in each class.
	.Added a character class property to the character class, so we can know which class we are in, and we can access specific functions in those classes that work only for a specific class.
	.In the constructor of character we get the values that we need from the class, everything else that we need we get from the class.
	.CharacterSkills struct was moved to outside generic Types class to its own class, along with a new folder and namespace
		.I'm not implementing any gameplay with the skill so will be left as is, but this functionality needs to be revised before use, and be under the same patterns used in the project.
	.TakeDamage was decreasing the health from the own character damage property instead of the amount, this makes no sense lol, so this method was refactored to use the amount passed as a parameter. Also the parameter type changed to small int to save memory.
	.Die method was doing nothing, will be refactored to be displayed during gameplay.
	.WalkTO is doing nothing, makes sense to put the logic here to try to find the enemy player and move to it, will be refactored to do so.
	.StartTurn method should not be here. In the new structure created, behavior will be responsible for each turn, and this behavior then will call the methods inside the character, so this method is moved out from the character.
	.CheckCloseTargets was refactored to something more performative, now checks if can attack the enemy, if not, calls method walksTo to get closer to the enemy, but if in range, method attack instead.
	.Attack was not taking into consideration M_CurrentDamageMultiplier value, also the calculation for the damage was kinda strange. Now use the base value for the attack, multiply by the multiplier, and then gets a random value that can be 20% lower or higher than the base value.
		.the 20% variation value was an arbitrary one, can go into the settings file or be changed into a new logic (maybe a status inside each class?)
	.Properties set to private, no outside class should change those values, on the methods inside this class.		
	.Added a new bool property to know if this character belongs to the player.
	.Created a new method inside random to calculate the damage, while doing the variation.

  ✦ Types
	-With the changes made above, the "Types" file is no longer needed, since is empty, so is now deleted.
	-We no longer have any .cs file outside any folder structure now.
	-Also we don't have anymore any use with the static call to the type like before, so a good thing also.
	
 ✦ Back to GameManager
 
	-Added messages for gameplay and endgame to out settings file.
	-Back to our game manager, let's implement the behavior past new game point (finally some action!)
	-First let's get all the setup new game did and pass it to our current game property
	-Create all methods that we will need, Gameplay, GameOver, TryAgain and EndGame
	-Refactoring:
		.With the changes made until now, we no long need all those variables that were declared before directly into the Program.cs.
		.Also the method GetPlayerChoice is no longer needed, now we dynamically gets the information we need, also all our texts are provided from a JSON file to be easier to edit externally, and we can even easily now add a localization process 
		.Methods CreatePlayerCharacter, CreateEnemyCharacter and StartGame are also handled with everything we did so far and are also no longer needed.
		.We also added a bunch of inputs from the player easily with the new system, such as getting it's name, the size of the battlefield and the class to play, also with the new dynamic system we can easy override those inputs and get a random/default value without breaking the game.
		.And of course, it's pretty easy now to add new inputs and settings, for example we could use a save/load feature with everything implemented, we just need something to take care to save from our classes into a JSON file, or even rouds between the fights, ou fights with teams.
	-Created new game behaviors.
	
✦ PlaceCharactersInGrid
	
	-New behavior to place all or selected characters somewhere in the Grid. 
	-Following the single responsibility principle we need to have a class to take care of that, instead of nesting this responsibility into another class.
	-Right now the game is only 1x1, but if the game started to work with multiple characters per team, this behavior could be easily changed to adress that.
	-As property this class has the Grid, so it knows where to place everything and also check the boolean inside each GridBox that now has something in it.
	-Also a list with all the characters that needs to the places (like said before, we don't care if right now we are working with team or single character).
	-The constructior receives all the property values needed.
	-Method Find Available places: We can only place something if the Grid Box is free, the class cannot assume everything will be empty since it should not care when is called.
		.The method gets all GridBox inside the grid available and creates a new internal list. Since we are going to remove every time we place something from the list, a list better than an array. 
		.In the end the method is costly since uses a lot of Linq, it can be further optimized in the future
		.To return the player and enemy character we are getting the 0 and 1 position, this is not good, but for now will work. Needs to be changed in the future to return each team.


✦ TurnHandler

	-Handles each turn, increasing the turn value, making characters move and attack.
	-After each turn returns to Game Manager that will update the current game property with the values generated here.
	-Until the game ends, game manager calls the method next turns.
	-If is the player turn, after the turn ends it will show in the screen what is happenning.
	-has the property currentPlayerTurn to control who turn is it. 0 the player and 1 the PC, the values is settled randomly in the start method, and then changed between.
	-If we had more teams, we could use this property to know who turn it was, we just needed to know to number max of player.
	-Also a list of characters so we can do things with them during the turn. 
	-Creation of new interface for turns inheriting from behavior so we can declare the method 	DoTurn
	-DoTurn method will go as follow //Check if can attack

            //If Is close enought Attacks

            //If not move close to the enemy

            //Checks if someone is dead, if so, we returns false ending the gameplay.
			
	- With this we moved all the old methods to the new structure, and now are doing a properly gameplay.
	
✦ GameOver
	-Shows the result of the battle.
	-Also should asked the player if wanted to play again, and then Game manager would reset the game, Unfortunately there will be no time to implement that
	
✦ EndGame

	-Show a end message to the player and finish the game.
	
	